{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E3ICMoPZL9W5"
      },
      "source": [
        "# コンピュータの言語2025: 課題２"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T5575SyRL9W6"
      },
      "source": [
        "## 1. はじめに\n",
        "\n",
        "[Google colaboratory](https://colab.google) や [jupyter notebook](https://jupyter.org) はプログラムを対話的に実行できる便利な環境です．今年度のコンピュータの言語では， Google colaboratory 環境を使って練習しながら python とプログラムの考え方に慣れていってもらいます．\n",
        "\n",
        "### セルの実行と編集\n",
        "\n",
        "notebook 環境のドキュメントは __セル(Cell)__ というまとまりから構成されています．セルには２種類あります．\n",
        "\n",
        "* __テキストセル__ : 説明や文章を書きます．ダブルクリックで編集することができ，__Shift+Enter__ (Shiftキーを押しながらEnterキーを押す） で確定されます．\n",
        "* __コードセル__ : プログラムを書いて実行します．クリックで編集することができ，__Shift+Enter__ でプログラムが実行されます．\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GxV_BKupL9W6"
      },
      "source": [
        "## 2. python を使った計算"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M42uxeN9L9W6"
      },
      "source": [
        "### 四則計算"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O7XMeUoxL9W7"
      },
      "source": [
        "いくつかの計算をして見ましょう．四則演算の記号は以下となります．\n",
        "* 足し算：```+```\n",
        "* 引き算：```-```\n",
        "* 掛け算：```*```\n",
        "* 割り算：```/```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "lxySBu7vPVL_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "648b1ca7-c710-458a-e3fe-fe69df53dc37"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "1+1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "oQ_CjkQOPVMH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ba2bdb35-2643-466b-fe11-7fb8ecd205f7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "3-2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "9WBDpkQ2PVMM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3d9ddd45-b01e-46f6-8c29-fac925e3f0e3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.0"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "4/2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "JAfCpLo8PVMQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "929549c7-03d3-4020-9540-c3db458604e0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "2*3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "OPMGfsHwPVMS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1bbb4339-54c7-434a-c822-5d519b91b594"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.0"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "2.0*3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "czcq9a97PVMV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f6dc6d6-3939-460a-ae29-5ab19a2c5d2b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "(10+3)*2-1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-om5rl9SL9W9"
      },
      "source": [
        "### べき乗\n",
        "\n",
        "$2^3$ は　```**``` という記号を使って計算することができます．２の３乗は８ですね．"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "BKwhLmbaPVMY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40ab8280-39f3-4436-b9b3-24e708f55ef4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "2**3"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gc1dXdGgPVMf"
      },
      "source": [
        "### 割り算の商と剰余\n",
        "割り算の```/``` は少数まで求めますが，整数だけ求めたいとき，つまり割り算の__商__は ```//```，割り算の__あまり（剰余）__は ```%``` という記号を使って計算することができます．例えば，10を3で割った時の商3と余り1 については以下のように求めることができます．"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "rDXH14OjPVMg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9282389b-bca6-4be0-a374-c036cd37abcb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "10//3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "aHL6ExqPPVM5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6edb87c6-4934-43e3-889b-11473eed39dd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "10%3"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oviZr5FVPVM-"
      },
      "source": [
        "### コメント\n",
        "プログラムをするときには，コードの説明を入れることがよくあります．この説明のことを __[コメント](http://ja.wikipedia.org/wiki/コメント(コンピュータ)__ と言います．コメントはプログラムでは通常実行されません．\n",
        "\n",
        "Python ではコメント部分を示すのに ```#``` の記号を使い，```＃``` のある場所から行末までがコメントとなります．"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "ZB19hyAVPVNQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "793b10a5-eeac-49d7-bfcf-a9fea1ba8c65"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "10%3  # この部分は説明です．"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CbX2EtYxPVNX"
      },
      "source": [
        "### printによる出力\n",
        "ここまでの計算では，全て計算結果がすぐ下に出てきていましたが，複数の計算結果を出力したい場合には ```print``` 命令を使います．書式は\n",
        "\n",
        "```\n",
        "print(出力したいもの)\n",
        "```\n",
        "\n",
        "です．"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "m0_1xR46PVNX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8872d82d-1de4-4e71-af83-4f5cbdbc67e3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "6\n",
            "1+1を計算したら 2 になる\n"
          ]
        }
      ],
      "source": [
        "print(1+1)\n",
        "print(3+3)\n",
        "print(\"1+1を計算したら\", 1+1, \"になる\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uMZHil5YPVPA"
      },
      "source": [
        "### ビットとバイト\n",
        "\n",
        "前回の授業では __ビット(bit)__ と __バイト(byte)__ という単位について学習しました．\n",
        "\n",
        "それでは何ビットで何通りのことを表現できるかを調べてみましょう．そのためには，２のべき乗を計算すればよいことになります．$2^n$ は python では ```2**n``` で計算できますので，以下のようになります．"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "4u2DMH0UPVPB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a7cb92e7-061b-476c-b690-191ddb3095f7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "4\n",
            "8\n"
          ]
        }
      ],
      "source": [
        "print(2**1) # 1ビット\n",
        "print(2**2) # 2ビット\n",
        "print(2**3) # 3ビット"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZMbrpFSNPVPD"
      },
      "source": [
        "次に何バイトで何通りのことを表現できるでしょうか？ 1バイトは8ビットですから，p バイトだと $8 \\times p$  ビットになりますので，"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "0Rsbn6orPVPE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0fe4be7a-c5f1-40ee-8474-70fa6a359826"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "256\n",
            "65536\n",
            "16777216\n"
          ]
        }
      ],
      "source": [
        "print(2**(8))   #1バイト\n",
        "print(2**(8*2)) #2バイト\n",
        "print(2**(8*3)) #3バイト"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qx5f_gzbPVPH"
      },
      "source": [
        "バイト数が大きくなると急速に大きな数になっていることがわかりますね．"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iYrgxpI3L9XA"
      },
      "source": [
        "## 3. データ型(type)\n",
        "\n",
        "プログラムにはどんな言語にも様々なデータの型があります．Python には以下の型があります．\n",
        "\n",
        "* __数値型__\n",
        "\t* 整数 (__int__)\n",
        "\t* 浮動小数点（__float__）\n",
        "* __文字列型__ (__str__)\n",
        "* __真偽型__ (__bool__)\n",
        "\n",
        "そして，それらを複数集めて一緒に使うための型があります．\n",
        "\n",
        "* __リスト型__ (__list__)\n",
        "* __辞書型__ (__dict__)\n",
        "* __タプル型__ (__tuple__)\n",
        "\n",
        "今回は上の，数値型，文字列型，論理型について扱います．\n",
        "\n",
        "__以下では，例にある計算や式を下のセルに入力して実行してください__\n",
        "（キーボードで入力してキーボード入力に慣れるようにしてください）\n",
        "\n",
        "__プログラムの実行は，実行したい行（セル）を選択して shiftキーを押しながらenter(またはreturn) キーを押します．__"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zG7vH4quL9XA"
      },
      "source": [
        "### 数値型\n",
        "\n",
        "\n",
        "#### 整数\n",
        "```python\n",
        "1+1\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "tuT9151QL9XA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "334973cd-868d-47c7-8375-48d453ef3de2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "1+1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dFRV5UOEL9XA"
      },
      "source": [
        "#### 浮動小数点\n",
        "浮動小数点数であることを明示するためには ```.0``` をつけます．\n",
        "```python\n",
        "1.0+1.0\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "cwQU40kxL9XA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "183fab55-d3b9-4311-c926-63fad688ccb0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.0"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "1.0+1.0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xG5l5waAL9XA"
      },
      "source": [
        "整数と浮動小数点の数を一緒に計算すると，自動的に __型変換__ が行われて，結果は浮動小数点型になります．\n",
        "```python\n",
        "1+2.0\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "_V681CElL9XA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5e877ab1-57da-4add-bc9b-b648dad4aedb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.0"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "1+2.0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-u9cjfVOL9XB"
      },
      "source": [
        "### 文字列\n",
        "\n",
        "\" \" や '' の記号で囲まれた文字が ___文字列___ として扱われます．どちらの記号を使っても構いません．\n",
        "```python\n",
        "\"Hello\"\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "Bt81iygYL9XB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "b6b90991-01ea-4e38-bb7d-9cf90c5ef6cd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Hello'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "\"Hello\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gcR7oGUtL9XB"
      },
      "source": [
        "```python\n",
        "'Hello'\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_Zzl1OEnL9XB"
      },
      "outputs": [],
      "source": [
        "'Hello'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hvm95QeGL9XB"
      },
      "source": [
        "文字列型での足し算は，二つの文字列をくっつける操作になります．\n",
        "```python\n",
        "'Hello' + 'Python'\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "gfAUS-RSL9XB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "1b7d17ba-efbd-438e-b8bf-908921f106d4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'HelloPython'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "'Hello'+'Python'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vC9RVRbyL9XB"
      },
      "source": [
        "数字も \"\" で囲まれると文字列として扱われます．例えば，数字の 1 と文字の 1 の足し算をするとエラーになります．\n",
        "```python\n",
        "1 + '1'\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "ZjiCm40LL9XC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "outputId": "11a07e8e-6a12-4bc4-84aa-2e51a9048045"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "unsupported operand type(s) for +: 'int' and 'str'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2369827484.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;36m1\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'1'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'int' and 'str'"
          ]
        }
      ],
      "source": [
        "1+'1'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qSm0zstZL9XC"
      },
      "source": [
        "上のエラー表示の ___TypeError___ は「型のエラー」ということですね．int（整数）と str（文字列）では足し算ができないと怒られます．"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FCKf8_V3L9XC"
      },
      "source": [
        "### 型の確認と変換"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qTPUXz8bL9XC"
      },
      "source": [
        "型(type)の確認は ```type()``` という関数で確かめることができます．以下のそれぞれの命令の結果を確かめてください．\n",
        "```python\n",
        "type(1), type(1.0), type('hello')\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "f1lrSdLTL9XC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e4b3680-d7c9-4856-e4ff-f79d61887c3c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "int"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "type(1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "z9AZzuYKL9XC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "938ffc80-cc9f-4ad8-e2e2-de8d33669558"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "float"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "type(1.0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "wmEazsADL9XC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7cfda63b-0398-4de1-9385-6c57f1b848f9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "type('hello')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YTMqLifTL9XC"
      },
      "source": [
        "異なる型どうしでも適切に型の変換をしてやることで演算をすることができます．型変換をする関数には ```int(), float(), str()``` があります．\n",
        "```python\n",
        "1 + int('1')   # '1' を整数型の1として扱ってほしい\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "-PYZeEltL9XD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8e01e705-6991-4e0b-d956-62360aef9112"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "1+int('1')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dlRG_QoPL9XD"
      },
      "source": [
        "```python\n",
        "str(1) + '2'   # 1 を 文字列型の'1' として扱ってほしい\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "kI6X-hglL9XD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "41d24bbb-2abb-4af5-fb06-f0fa5556bd94"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'12'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "str(1)+'2'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6OakFb16pzQI"
      },
      "source": [
        "```python\n",
        "str(1) + '2'   # 1 を 文字列型の'1' として扱ってほしい\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OvTtvzz4L9XD"
      },
      "source": [
        "### 真偽型\n",
        "\n",
        "論理型，ブール型とも言います．__真(True)__か__偽(False)__の２つの値だけを示す場合に使われます．以下では２つの数値を比較する演算子（__比較演算子__) の結果が真偽型で表示されている例です．\n",
        "```python\n",
        "3>1\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "RVZaR4PsL9XD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "93b27399-a1ce-41d8-ba49-b2ed0416f548"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "3>1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Rdzr6UxzL9XD"
      },
      "source": [
        "```python\n",
        "3<1\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "LgCSVqlWL9XD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "57083a34-b3e9-4783-f1ea-97e90f785002"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "3<1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bbSYdIlWL9XD"
      },
      "source": [
        "比較演算子には以下のようなものがあります．\n",
        "\n",
        "|演算子| 使用例 | 意味 |\n",
        "|------|--------|------|\n",
        "| == | a==b | a と b が等しければ True |\n",
        "| != | a!=b | a と b が違うなら True |\n",
        "| < | a<b | a が b 未満なら True |\n",
        "| <= | a<=b | a が b 以下なら True |\n",
        "| >= | a>=b | a が b 以上なら True |\n",
        "| > | a>b | aがbより大きいなら True |\n",
        "\n",
        "他の言語と異なり，２つの比較をつなげることができます．\n",
        "```python\n",
        "print( 1<2<3 )\n",
        "print( 2<3<1 )\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "6q6rU4AxL9XD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9cd57e15-63a2-47ac-fc8c-36600b19511a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n"
          ]
        }
      ],
      "source": [
        "print(1<2<3)\n",
        "print(2<3<1)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ov4SQ7GAL9XE"
      },
      "source": [
        "## 論理演算\n",
        "\n",
        "論理型には ```and``` や ```or``` などの演算子があります．\n",
        "```python\n",
        "True and False\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "dPKZUFPwL9XE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "345e9f06-509c-4df1-bafa-98fcac61c9cd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "True and False"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NP48rrMoL9XE"
      },
      "source": [
        "```python\n",
        "True or False\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "oK7ZT4BcL9XE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bf63b307-1048-451a-d32b-9c809f2b1052"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "True or False"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KQDH0OmYL9XE"
      },
      "source": [
        "True と 1 False と 0 は同じものとして扱われます．\n",
        "```python\n",
        "True==1\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "uqhOJBHcL9XE"
      },
      "outputs": [],
      "source": [
        "True==1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "452SdEvGL9XF"
      },
      "source": [
        "```python\n",
        "False==0\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "6b29dzFxL9XF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "378d10ac-8a43-4805-c762-66478699a7e0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "False==0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TANJpU1-L9XF"
      },
      "source": [
        "```not``` は否定です．\n",
        "```python\n",
        "print(not True)\n",
        "print(not False)\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "XCRiRqJBL9XF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9dd2a862-4f1d-459d-de72-dda0ad65a4c8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n"
          ]
        }
      ],
      "source": [
        "print(not True)\n",
        "print(not False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hCXg5pM6L9XF"
      },
      "source": [
        "「6 は2で割り切れ，かつ3でも割り切れる」は真でしょうか偽でしょうか？\n",
        "\n",
        "「6が2で割り切れる」は 「6を2で割った余りが0である」ということですから，```6%2==0```　とかけます．\n",
        "\n",
        "「かつ」は ```and``` ですから以下のように書くことができます．\n",
        "\n",
        "```python\n",
        "(6%2==0) and (6%3==0)\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "DQ6IXbwdL9XF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b18866f4-308b-44ce-92fd-359b726a9f3e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "(6%2==0)and(6%3==0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "byOJAzciL9XF"
      },
      "source": [
        "## 4. 変数\n",
        "\n",
        "プログラムではデータをそのまま扱うことは稀で，ふつうデータに名前をつけて操作を行います．この名前のことを __変数__ といいます．\n",
        "\n",
        "Python では変数が何のデータ型なのかを指定せずに，すぐに定義することができます．\n",
        "\n",
        "```python\n",
        "x = 3      # 3 という数字を用意して，それに x という名前をつける\n",
        "print(x)   # x の中身を出力する\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "Uz6vQSr-L9XG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4a5b0eb-d94c-4fd4-eccc-ce85f40f1b38"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ],
      "source": [
        "x=3\n",
        "print(x)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qKCL0nR5L9XG"
      },
      "source": [
        "変数を初めて宣言する時に，型を指定しなくてもよいのは，よい面もありますが，悪い面もあります．他の人のプログラムを見た時に，その変数がどのような型で使われているのかわからない時があるからです．そんな時は，```type``` 関数で型を調べることが助けになります．\n",
        "\n",
        "```python\n",
        "x = 3\n",
        "print(x)\n",
        "print(type(x))\n",
        "\n",
        "x = \"Hello\"\n",
        "print(x)\n",
        "print(type(x))\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "8jdFKwufL9XG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ac71a52d-bb65-4ccf-af4c-e82d372e0351"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "<class 'int'>\n"
          ]
        }
      ],
      "source": [
        "x=3\n",
        "print(x)\n",
        "print(type(x))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "mhzQndvJL9XG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "89a9124d-5e97-4126-bde6-2d460d72e6ed"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello\n",
            "<class 'str'>\n"
          ]
        }
      ],
      "source": [
        "x = \"Hello\"\n",
        "print(x)\n",
        "print(type(x))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G359-q0cL9XG"
      },
      "source": [
        "## print"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sZ68oIyPL9XG"
      },
      "source": [
        "```print``` 命令で変数の値を出力するときに，変数の数値や文字を文の中に埋め込むとわかりやすい出力になります．\n",
        "\n",
        "\n",
        "そのためには，文字列型のformat というメソッドを使います．"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "j119CGPfL9XG"
      },
      "outputs": [],
      "source": [
        "x=3\n",
        "print( \"xの値は{}です\".format(x) )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "KWEx0AOwL9XG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "241ff943-0121-4190-c09f-dd9d79aeb105"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "「This is a pen.」の日本語訳は「これはペンです」です．\n"
          ]
        }
      ],
      "source": [
        "x=\"This is a pen.\"\n",
        "y=\"これはペンです\"\n",
        "print( \"「{}」の日本語訳は「{}」です．\".format(x,y) )"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IFsMD5UYL9XH"
      },
      "source": [
        "また，python3.6 からは __f文字列__ という表記でも，変数を文字列に埋め込むことができます．文字列の前に f を書き，{} の中に変数名を書きます．こちらの方が簡単ですね．"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "id": "VPG1jJZpL9XH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20e0e744-e4cc-41b5-d48b-f1fa15de10b8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "xの値は3です\n",
            "Good morning!の日本語訳はおはようです．\n"
          ]
        }
      ],
      "source": [
        "x = 3\n",
        "print( f'xの値は{x}です')\n",
        "x = 'Good morning!'\n",
        "y = 'おはよう'\n",
        "print( f'{x}の日本語訳は{y}です．' )"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hRhAcmfDL9XH"
      },
      "source": [
        "# 課題\n",
        "\n",
        "* 必ず実行結果を出力するようにしてください．\n",
        "\n",
        "__[1]__  文字列に対して * の演算子を使うと結果はどうなるでしょう．以下のプログラムの結果を下に書いて出力を調べてください．\n",
        "\n",
        "```python\n",
        "\"hello\"*6\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "problem": 1,
        "id": "F_hE2eeEL9XH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "3969cb22-0cf1-4f34-e497-600977aa0441"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'hellohellohellohellohellohello'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "\"hello\"*6"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dJek48WgL9XH"
      },
      "source": [
        "__[2]__ 250円の定規を4本、60円のクレヨンを8本を2割引で購入しました。消費税を10%として、支払い金額を求めるために、以下の式の XXXX, YYYY, ZZZZ の部分を編集して完成させてください。"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "problem": 2,
        "id": "MLYnFPcwL9XH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b5a52f50-5baf-44d4-e35e-3738cfc5fc15"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1302.4\n"
          ]
        }
      ],
      "source": [
        "pay =  (250*4 + 60*8)*0.8*1.1\n",
        "print(pay)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xjzU2dpYL9XI"
      },
      "source": [
        "__[3]__ 「xが0よりも大きい」かつ「xを5で割ったあまりが2よりも小さい」という条件にあえば True、合わなかったら False が出力されるように、以下のプログラムを完成させてください。"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "problem": 3,
        "id": "cb8dwjstL9XI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a60beb10-ccc4-49f2-8286-e54ee3d20e4e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ],
      "source": [
        "x = 7\n",
        "hantei = (0<x) and (x%5<2)\n",
        "print(hantei)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xBprzM8vL9XI"
      },
      "source": [
        "__[4]__ y は100以下の数で3で割っても4で割っても割り切れる数であれば True, そうでなければ False を出力するように，以下のプログラムを完成してください．"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "problem": 4,
        "id": "682soCyAL9XI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2779ebd3-b119-4c52-97ff-3ca5d49311a5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "y = 24\n",
        "hantei =  (y<=100) and (y %12==0)\n",
        "print(hantei)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F0a-5km4L9XI"
      },
      "source": [
        "__[5]__ 以下のプログラムを改変して、「大谷翔平は2024年に..歳になります」と出力するように、以下の式の XXXX, YYYY, ZZZZ の部分を変数を使って書いてください。"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "problem": 5,
        "tags": [],
        "id": "C4nydZYAL9XI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a164a9c-4f9f-4f00-a32e-acde2388d070"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "大谷翔平は2024年に30歳になります\n"
          ]
        }
      ],
      "source": [
        "year_birth = 1994\n",
        "year_now   = 2024\n",
        "age = year_now - year_birth # year_birth と year_now を使った式で書いてください\n",
        "print(f\"大谷翔平は{year_now}年に{age}歳になります\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RjZJ70NNL9XI"
      },
      "source": [
        "__[6]__ 標高が100m高くなると、気温が0.6度下がると言われています．高槻キャンパスの標高は約200mです．ある日の大阪市（海抜0mとする）の気温が20度であるときの高槻キャンパスの気温は何度と計算できるでしょう．以下のプログラムの xxxx, yyyyyy を変更してプログラムを完成させてください．"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "NrTgnhooL9XI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f99fee4a-4c97-455d-9095-099998aaadd1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "高槻キャンパスの気温は18.8です\n"
          ]
        }
      ],
      "source": [
        "altitude = 200       # 標高\n",
        "temp_0 = 20        # 標高0mでの気温\n",
        "\n",
        "temp_takatsuki = 20-altitude/100*0.6\n",
        "print(f\"高槻キャンパスの気温は{temp_takatsuki}です\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LZQJiEsWL9XJ"
      },
      "source": [
        "# 課題の提出\n",
        "\n",
        "以下をダブルクリックして入力してください"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e_NhAp7KL9XJ"
      },
      "source": [
        "名前：細田　蓮央"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HrvGX5B7L9XJ"
      },
      "source": [
        "学籍番号：情24-0400"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2cDWbxdzL9XJ"
      },
      "source": [
        "感想：pythonを使った基本的な演算子を学ぶことができた。"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WUmyEijfL9XJ"
      },
      "source": [
        "ファイルを保存したら，このファイルを「ダウンロード」ボタンからダウンロードし（左のファイルブラウザでファイルを選択して右クリックし，Downloadを選択してダウンロードすることもできます），関大LMSで提出してください．\n",
        "\n",
        "__注意：ダウンロードしたファイルは Word などのアプリケーションで中身を確認することはできません．中身を確認したい場合は Google Colab にファイルをアップロードして確認してください．__"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "M3swQt1IL9XJ"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "anaconda-cloud": {},
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.5"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}